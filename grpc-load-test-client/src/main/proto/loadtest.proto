syntax = "proto3";

package com.example.loadtest;

option java_multiple_files = true;
option java_package = "com.example.grpc.loadtest.proto";
option java_outer_classname = "LoadTestProto";

// Load test service definition
service LoadTestService {
  // Simple unary call for basic load testing
  rpc Echo(EchoRequest) returns (EchoResponse);
  
  // Streaming call for testing streaming scenarios
  rpc StreamingEcho(stream EchoRequest) returns (stream EchoResponse);
  
  // CPU intensive call for testing under load
  rpc ComputeHash(ComputeRequest) returns (ComputeResponse);
  
  // Health check endpoint
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message EchoRequest {
  string message = 1;
  int64 timestamp = 2;
  string client_id = 3;
  map<string, string> metadata = 4;
}

message EchoResponse {
  string message = 1;
  int64 timestamp = 2;
  string server_id = 3;
  int32 processing_time_ms = 4;
}

message ComputeRequest {
  string input = 1;
  int32 iterations = 2;
  string algorithm = 3; // e.g., "sha256", "md5"
}

message ComputeResponse {
  string result = 1;
  int64 computation_time_ns = 2;
  int32 iterations_completed = 3;
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
  string message = 2;
}